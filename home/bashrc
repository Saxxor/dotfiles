if grep -q -F 'Arch Linux' /etc/issue
then distro='arch'
else distro='debian'
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
eval "$(dircolors -b)"

alias ls='ls --color=auto --group-directories-first'
alias s='sudo'
alias update='a update && a upgrade'

if test $distro = 'arch'
then
    a() {
        arg="$1"
        shift 1
        case "$arg" in
            s) pacman -Ss --color auto "$@" ;;
            i) s pacman -S --color auto "$@" ;;
            r) s pacman -Rns --color auto "$@" ;;
            update) s pacman -Sy --color auto ;;
            upgrade) s pacman -Su --color auto ;;
            info) pacman -Sii --color auto "$@" ;;
            depends) pacman -Sii --color auto "$@" | grep 'Depends On' ;;
            rdepends) pacman -Sii --color auto "$@" | grep "Required By" ;;
            clean) s pacman -Scc --color auto ;;
            file-search) pacman -Fs --color auto "$@" ;;
            installed) pacman -Qe --color auto ;;
            size) LC_ALL=C pacman -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h ;;
        esac
    }
elif test $distro = 'debian'
then
    a() {
        arg="$1"
        shift 1
        case "$arg" in
            update) s apt update ;;
            upgrade) s apt full-upgrade ;;
        esac
    }
    . /etc/bash_completion
fi

g() {
	if test -z "$1"
	then
		git status
		return
	fi
	arg="$1"
	shift 1
	case "$arg" in
		d) git diff --patience "$@" ;;
		wd) git diff --word-diff --patience "$@" ;;
		ca) g a ./ && g co "$@" ;;
		co) git commit -m "$@" ;;
		a) git add "$@" ;;
		ai) g a $(git status -s | fzf -m | cut -c 4-) ;;
		b) git branch "$@" && g c "$@" ;;
		oops) git reset HEAD^ ;;
		last) g d HEAD^ HEAD ;;
		wlast) g wd HEAD^ HEAD ;;
		c) git checkout "$@" ;;
		p) git push "$@" ;;
		pp) git push --set-upstream origin `git rev-parse --abbrev-ref HEAD` "$@" ;;
		P) git pull "$@" ;;
		m) git merge "$@" ;;
		clean)
			git fetch --depth=1
			git reflog expire --expire-unreachable=now --all
			git gc --aggressive --prune=all
			;;
	esac
}
